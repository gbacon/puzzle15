(define-sort Board () (_ BitVec 15))
(define-sort Hole  () (_ BitVec 15))

(define-fun h0    () Hole #b000000000000001)
(define-fun h1    () Hole #b000000000000010)
(define-fun h2    () Hole #b000000000000100)
(define-fun h3    () Hole #b000000000001000)
(define-fun h4    () Hole #b000000000010000)
(define-fun h5    () Hole #b000000000100000)
(define-fun h6    () Hole #b000000001000000)
(define-fun h7    () Hole #b000000010000000)
(define-fun h8    () Hole #b000000100000000)
(define-fun h9    () Hole #b000001000000000)
(define-fun h10   () Hole #b000010000000000)
(define-fun h11   () Hole #b000100000000000)
(define-fun h12   () Hole #b001000000000000)
(define-fun h13   () Hole #b010000000000000)
(define-fun h14   () Hole #b100000000000000)

(define-fun used  ((b Board) (h Hole)) Bool (= h (bvand b h)))
(define-fun empty ((b Board) (h Hole)) Bool (not (used b h)))

;(simplify (empty #b000000000000000 h1))
;(simplify (used  #b000000000000100 h3))
(echo "Peg 14 used")
(simplify (used  #b100000000000011 h14))

; For a hole to be unchanged from p to q, it must either
; be used in both p and q or empty in both p and q.
(define-fun unchanged ((p Board) (q Board) (h Hole)) Bool
  (= (used p h) (used q h)))

(define-fun in-jump ((i Hole) (j Hole) (k Hole) (h Hole)) Bool
  (or (= i h) (= j h) (= k h)))

; For a peg in hole i to jump j and land in k,
; p's i and j must have been used but k empty, whereas
; q's i and j must be empty but k used. The rest of the
; pegs can have no change from p to q.
(define-fun valid ((p Board) (q Board) (i Hole) (j Hole) (k Hole)) Bool
  (and (used  p i) (empty q i)
       (used  p j) (empty q j)
       (empty p k) (used  q k)
       (or (unchanged p q h0)  (in-jump i j k h0))
       (or (unchanged p q h1)  (in-jump i j k h1))
       (or (unchanged p q h2)  (in-jump i j k h2))
       (or (unchanged p q h3)  (in-jump i j k h3))
       (or (unchanged p q h4)  (in-jump i j k h4))
       (or (unchanged p q h5)  (in-jump i j k h5))
       (or (unchanged p q h6)  (in-jump i j k h6))
       (or (unchanged p q h7)  (in-jump i j k h7))
       (or (unchanged p q h8)  (in-jump i j k h8))
       (or (unchanged p q h9)  (in-jump i j k h9))
       (or (unchanged p q h10) (in-jump i j k h10))
       (or (unchanged p q h11) (in-jump i j k h11))
       (or (unchanged p q h12) (in-jump i j k h12))
       (or (unchanged p q h13) (in-jump i j k h13))
       (or (unchanged p q h14) (in-jump i j k h14))))

(echo "Validity (3,1,0) check")
(simplify (valid #b000000000001010 #b000000000000001 h3 h1 h0))
(echo "Blocked pegs can't jump")
(simplify (valid #b000000000001011 #b000000000000001 h3 h1 h0))

(define-fun legal ((p Board) (q Board)) Bool
  (or (valid p q  h0  h1  h3) (valid p q  h3  h1  h0)
      (valid p q  h0  h2  h5) (valid p q  h5  h2  h0)
      (valid p q  h1  h3  h6) (valid p q  h6  h3  h1)
      (valid p q  h1  h4  h8) (valid p q  h8  h4  h1)
      (valid p q  h2  h4  h7) (valid p q  h7  h4  h2)
      (valid p q  h2  h5  h9) (valid p q  h9  h5  h2)
      (valid p q  h3  h4  h5) (valid p q  h5  h4  h3)
      (valid p q  h3  h6 h10) (valid p q h10  h6  h3)
      (valid p q  h3  h7 h12) (valid p q h12  h7  h3)
      (valid p q  h4  h7 h11) (valid p q h11  h7  h4)
      (valid p q  h4  h8 h13) (valid p q h13  h8  h4)
      (valid p q  h5  h8 h12) (valid p q h12  h8  h5)
      (valid p q  h5  h9 h14) (valid p q h14  h9  h5)
      (valid p q  h6  h7  h8) (valid p q  h8  h7  h6)
      (valid p q  h7  h8  h9) (valid p q  h9  h8  h7)
      (valid p q h10 h11 h12) (valid p q h12 h11 h10)
      (valid p q h11 h12 h13) (valid p q h13 h12 h11)
      (valid p q h12 h13 h14) (valid p q h14 h13 h12)))

(echo "legal check")
(simplify (legal #b000000000001010 #b000000000000001))

(declare-const  b0 Board)
(declare-const  b1 Board)
(declare-const  b2 Board)
(declare-const  b3 Board)
(declare-const  b4 Board)
(declare-const  b5 Board)
(declare-const  b6 Board)
(declare-const  b7 Board)
(declare-const  b8 Board)
(declare-const  b9 Board)
(declare-const b10 Board)
(declare-const b11 Board)
(declare-const b12 Board)
(declare-const b13 Board)

(assert
  (and (legal b0  b1) (legal  b1  b2) (legal  b2  b3)
       (legal b3  b4) (legal  b4  b5) (legal  b5  b6)
       (legal b6  b7) (legal  b7  b8) (legal  b8  b9)
       (legal b9 b10) (legal b10 b11) (legal b11 b12) (legal b12 b13)))

;(assert (used  b0 h12))
;(assert (used b13  h4))
;(assert (used  b13 h0))
;(assert (used  b13 h0))
;(assert (empty  b0 h4))
;(assert (used   b0 h12))
;(assert (used  b13 h4))
(assert (empty b13 h12))

(check-sat)
(get-model)

;(define-fun b0 () (_ BitVec  15) #b111111111111110)
;(define-fun b1 () (_ BitVec  15) #b111111111110101)
;(define-fun b2 () (_ BitVec  15) #b111111111001101)
;(define-fun b3 () (_ BitVec  15) #b111011101011101)
;(define-fun b4 () (_ BitVec  15) #b100111101011101)
;(define-fun b5 () (_ BitVec  15) #b100111101111000)
;(define-fun b6 () (_ BitVec  15) #b101001101111000)
;(define-fun b7 () (_ BitVec  15) #b101000101011100)
;(define-fun b8 () (_ BitVec  15) #b100000001111100)
;(define-fun b9 () (_ BitVec  15) #b100001001011000)
;(define-fun b10 () (_ BitVec 15) #b100001000010010)
;(define-fun b11 () (_ BitVec 15) #b000000000110010)
;(define-fun b12 () (_ BitVec 15) #b000000000001010)
;(define-fun b13 () (_ BitVec 15) #b000000000000001)
